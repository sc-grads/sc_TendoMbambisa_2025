name: AutoTest Database Automation

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  setup-sql-dev:
    name: Setup SQL Server Environment (Development)
    runs-on: ubuntu-latest
    environment:
      name: Development
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache APT packages
        uses: actions/cache@v3
        id: cache-apt
        with:
          path: |
            /var/cache/apt
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('**/Install SQL Server Client') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Cache SQL Server Tools
        uses: actions/cache@v3
        id: cache-sql-tools
        with:
          path: |
            /opt/mssql-tools18
            /usr/lib/x86_64-linux-gnu/libmsodbcsql-18*
          key: ${{ runner.os }}-sql-tools-${{ hashFiles('**/Install SQL Server Client') }}
          restore-keys: |
            ${{ runner.os }}-sql-tools-

      - name: Install SQL Server Client
        if: steps.cache-apt.outputs.cache-hit != 'true' || steps.cache-sql-tools.outputs.cache-hit != 'true'
        run: |
          # Update package list
          sudo apt-get update
          
          # Install prerequisites
          sudo apt-get install -y curl gnupg unixodbc-dev
          
          # Clean up any existing Microsoft repository configurations and keys
          sudo rm -f /etc/apt/sources.list.d/mssql-release.list
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo rm -f /usr/share/keyrings/microsoft-prod.gpg
          sudo rm -f /usr/share/keyrings/microsoft-archive-keyring.gpg
          
          # Add Microsoft GPG key
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo tee /usr/share/keyrings/microsoft-archive-keyring.gpg > /dev/null
          
          # Add repository for Ubuntu 24.04
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/ubuntu/24.04/prod noble main" | sudo tee /etc/apt/sources.list.d/mssql-release.list
          
          # Update package list again and install SQL Server tools
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18
          
          # Add sqlcmd to PATH
          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH

      - name: Test Database Connection (Development)
        env:
          PINGGY_HOST: ${{ secrets.PINGGY_HOST }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SQL_USER: ${{ secrets.SQL_USER }}
        run: |
          # Test connection
          echo "Testing development database connection..."
          sqlcmd -S "$PINGGY_HOST" -U "$SQL_USER" -P "$DB_PASSWORD" -Q "SELECT 1" -N -C -b -o connect.log
          if [ $? -ne 0 ]; then
            echo "::error::Development connection test failed!"
            cat connect.log
            exit 1
          fi
          echo "✅ Development connection test successful!"
          cat connect.log

      - name: Setup Database (Development)
        env:
          PINGGY_HOST: ${{ secrets.PINGGY_HOST }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SQL_USER: ${{ secrets.SQL_USER }}
        run: |
          # Execute setup script with detailed error output
          echo "Running database setup script for development..."
          set +e
          sqlcmd -S "$PINGGY_HOST" -U "$SQL_USER" -P "$DB_PASSWORD" \
            -N -C \
            -i "./DatabaseAdministration/SQLStatements/SetupDatabase.sql" \
            -b -o output.log -e -V 16 -y 1000
          EXIT_CODE=$?
          set -e
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ Development database setup completed successfully!"
            cat output.log
          else
            echo "::error::Development database setup failed with exit code $EXIT_CODE"
            cat output.log
            exit 1
          fi

  setup-sql-prod:
    name: Setup SQL Server Environment (Production)
    runs-on: ubuntu-latest
    needs: setup-sql-dev
    environment:
      name: Production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache APT packages
        uses: actions/cache@v3
        id: cache-apt
        with:
          path: |
            /var/cache/apt
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('**/Install SQL Server Client') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Cache SQL Server Tools
        uses: actions/cache@v3
        id: cache-sql-tools
        with:
          path: |
            /opt/mssql-tools18
            /usr/lib/x86_64-linux-gnu/libmsodbcsql-18*
          key: ${{ runner.os }}-sql-tools-${{ hashFiles('**/Install SQL Server Client') }}
          restore-keys: |
            ${{ runner.os }}-sql-tools-

      - name: Install SQL Server Client
        if: steps.cache-apt.outputs.cache-hit != 'true' || steps.cache-sql-tools.outputs.cache-hit != 'true'
        run: |
          # Update package list
          sudo apt-get update
          
          # Install prerequisites
          sudo apt-get install -y curl gnupg unixodbc-dev
          
          # Clean up any existing Microsoft repository configurations and keys
          sudo rm -f /etc/apt/sources.list.d/mssql-release.list
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo rm -f /usr/share/keyrings/microsoft-prod.gpg
          sudo rm -f /usr/share/keyrings/microsoft-archive-keyring.gpg
          
          # Add Microsoft GPG key
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo tee /usr/share/keyrings/microsoft-archive-keyring.gpg > /dev/null
          
          # Add repository for Ubuntu 24.04
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/ubuntu/24.04/prod noble main" | sudo tee /etc/apt/sources.list.d/mssql-release.list
          
          # Update package list again and install SQL Server tools
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18
          
          # Add sqlcmd to PATH
          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH

      - name: Test Database Connection (Production)
        env:
          PINGGY_HOST: ${{ secrets.DEV_PINGGY_HOST }}
          DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          SQL_USER: ${{ secrets.PRO_SQL_USER }}
        run: |
          # Test connection
          echo "Testing production database connection..."
          sqlcmd -S "$PINGGY_HOST" -U "$SQL_USER" -P "$DB_PASSWORD" -Q "SELECT 1" -N -C -b -o connect.log
          if [ $? -ne 0 ]; then
            echo "::error::Production connection test failed!"
            cat connect.log
            exit 1
          fi
          echo "✅ Production connection test successful!"
          cat connect.log

      - name: Setup Database (Production)
        env:
          PINGGY_HOST: ${{ secrets.DEV_PINGGY_HOST }}
          DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          SQL_USER: ${{ secrets.PRO_SQL_USER }}
        run: |
          # Execute setup script with detailed error output
          echo "Running database setup script for production..."
          set +e
          sqlcmd -S "$PINGGY_HOST" -U "$SQL_USER" -P "$DB_PASSWORD" \
            -N -C \
            -i "./DatabaseAdministration/SQLStatements/SetupDatabase.sql" \
            -b -o output.log -e -V 16 -y 1000
          EXIT_CODE=$?
          set -e
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ Production database setup completed successfully!"
            cat output.log
          else
            echo "::error::Production database setup failed with exit code $EXIT_CODE"
            cat output.log
            exit 1
          fi
