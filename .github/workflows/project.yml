name: AutoTest Database Automation

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  install-sql-client:
    name: Install SQL Server Client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install SQL Server Client
        run: |
          # Install prerequisites
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          
          # Clean up any existing Microsoft repository configurations
          sudo rm -f /etc/apt/sources.list.d/mssql-release.list
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo rm -f /usr/share/keyrings/microsoft-prod.gpg
          
          # Add Microsoft GPG key (modern method)
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc > microsoft.asc
          sudo install -D -o root -g root -m 644 microsoft.asc /usr/share/keyrings/microsoft-archive-keyring.gpg
          rm microsoft.asc
          
          # Add repository for Ubuntu 24.04 (Noble)
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/ubuntu/24.04/prod noble main" | sudo tee /etc/apt/sources.list.d/mssql-release.list
          
          # Install packages
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18 unixodbc-dev
          
          # Add to PATH
          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH

  create-database:
    name: Connect and Setup Database
    runs-on: ubuntu-latest
    needs: install-sql-client
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install sqlcmd in current job
        run: |
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18
          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH

      - name: Create Database
        env:
          PINGGY_HOST: ${{ secrets.PINGGY_HOST }}
          PINGGY_PORT: ${{ secrets.PINGGY_PORT }}
          SQL_USER: ${{ secrets.SQL_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # Test connection with SSL bypass for testing
          /opt/mssql-tools18/bin/sqlcmd -N -C -S "$PINGGY_HOST,$PINGGY_PORT" -U "$SQL_USER" -P "$DB_PASSWORD" -Q "SELECT 1" -b -o connect.log || (cat connect.log && exit 1)
          
          # Run setup script
          /opt/mssql-tools18/bin/sqlcmd -N -C -S "$PINGGY_HOST,$PINGGY_PORT" -U "$SQL_USER" -P "$DB_PASSWORD" -i "./DatabaseAdministration/SQLStatements/SetupDatabase.sql" -b -o output.log -V 16 -y 1000
          
          # Check results
          if [ $? -eq 0 ]; then
            echo "âœ… Database setup completed!"
            cat output.log
          else
            echo "::error::SQL script failed"
            cat output.log
            exit 1
          fi
