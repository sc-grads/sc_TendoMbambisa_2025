name: SQL Setup Reusable Workflow

on:
  workflow_call:
    inputs:
      environment_name:
        required: true
        type: string
    secrets:
      PINGGY_HOST:
        required: true
      DB_PASSWORD:
        required: true
      SQL_USER:
        required: true

jobs:
  setup-sql:
    name: Setup SQL Server
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/mssql-tools:latest
      # Optional: Add credentials if your Docker image is in a private registry
      # credentials:
      #   username: ${{ secrets.DOCKER_USERNAME }}
      #   password: ${{ secrets.DOCKER_PASSWORD }}
    environment:
      name: ${{ inputs.environment_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # No need for separate installation step since tools are in the container
      # Caching is handled by Docker layers, so we can remove those steps

      - name: Test Database Connection
        env:
          PINGGY_HOST: ${{ secrets.PINGGY_HOST }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SQL_USER: ${{ secrets.SQL_USER }}
        run: |
          echo "Testing database connection for ${{ inputs.environment_name }}..."
          set +e
          /opt/mssql-tools/bin/sqlcmd -S "$PINGGY_HOST" -U "$SQL_USER" -P "$DB_PASSWORD" -Q "SELECT 1" -N -C -b -o connect.log
          EXIT_CODE=$?
          set -e

          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Database connection failed for ${{ inputs.environment_name }}!"
            cat connect.log
            exit 1
          fi
          echo "✅ Connection successful for ${{ inputs.environment_name }}!"
          cat connect.log

      - name: Setup Database
        env:
          PINGGY_HOST: ${{ secrets.PINGGY_HOST }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SQL_USER: ${{ secrets.SQL_USER }}
        run: |
          echo "Running database setup script for ${{ inputs.environment_name }}..."
          set +e
          /opt/mssql-tools/bin/sqlcmd -S "$PINGGY_HOST" -U "$SQL_USER" -P "$DB_PASSWORD" \
            -N -C \
            -i "./DatabaseAdministration/SQLStatements/SetupDatabase.sql" \
            -b -o output.log -e -V 16 -y 1000
          EXIT_CODE=$?
          set -e

          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Database setup failed for ${{ inputs.environment_name }} with exit code $EXIT_CODE"
            cat output.log
            exit 1
          fi
          echo "✅ Database setup successful for ${{ inputs.environment_name }}!"
          cat output.log
